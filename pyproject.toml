[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "medical-research-ai"
version = "2.0.0"
description = "Enhanced Medical Research AI with interactive diagnosis and Indian healthcare context"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Medical Research AI Team"}
]
keywords = ["medical", "ai", "healthcare", "diagnosis", "india"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    # Core ML and AI dependencies
    "transformers>=4.41.0",
    "accelerate>=0.29.0",
    "optimum>=1.17.0",
    "torch>=2.2.0",
    "torchvision>=0.17.0",
    "sentencepiece>=0.1.99",
    "safetensors>=0.4.2",
    
    # Audio processing
    "soundfile>=0.12.1",
    "librosa>=0.10.0",
    "torchaudio>=2.2.0",
    
    # Data handling and validation
    "pydantic>=2.7.0",
    "pyyaml>=6.0.1",
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    
    # Web interface
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.2",
    "python-multipart>=0.0.6",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    
    # UI and visualization
    "rich>=13.7.0",
    "Pillow>=10.2.0",
    
    # Dependency injection
    "dependency-injector>=4.41.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    
    # Development tools
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

production = [
    "gunicorn>=21.2.0",
    "bitsandbytes>=0.43.0; platform_system != 'Darwin' or platform_machine != 'arm64'",
]

gpu = [
    "bitsandbytes>=0.43.0",
    "accelerate[gpu]>=0.29.0",
]

[project.urls]
Homepage = "https://github.com/your-org/medical-research-ai"
Documentation = "https://github.com/your-org/medical-research-ai/blob/main/README.md"
Repository = "https://github.com/your-org/medical-research-ai.git"
Issues = "https://github.com/your-org/medical-research-ai/issues"

[project.scripts]
medical-ai = "web.main:main"
medbench = "medbench.__main__:main"

[tool.hatch.build.targets.wheel]
packages = ["application", "domain", "infrastructure", "web", "medbench"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "librosa.*",
    "soundfile.*",
    "PIL.*",
    "dependency_injector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["application", "domain", "infrastructure", "web"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
